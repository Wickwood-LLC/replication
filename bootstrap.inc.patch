--- ../../includes/bootstrap.inc	2007-11-05 17:03:51.479185501 +0100
+++ bootstrap.inc	2007-11-05 17:14:24.410741249 +0100
@@ -828,6 +828,7 @@ function drupal_bootstrap($phase) {
 
 function _drupal_bootstrap($phase) {
   global $conf;
+  global $local_conf;
 
   switch ($phase) {
 
@@ -865,6 +866,7 @@ function _drupal_bootstrap($phase) {
     case DRUPAL_BOOTSTRAP_LATE_PAGE_CACHE:
       // Initialize configuration variables, using values from settings.php if available.
       $conf = variable_init(isset($conf) ? $conf : array());
+      $local_conf = local_variable_init(isset($local_conf) ? $local_conf : array());
 
       _drupal_cache_init($phase);
 
@@ -948,3 +950,131 @@ function get_t() {
   }
   return $t;
 }
+/**
+ * Load the persistent variable table.
+ *
+ * The local_variable table is composed of values that have been saved in the table
+ * with local_variable_set() as well as those explicitly specified in the configuration
+ * file.
+ */
+
+function local_variable_init($local_conf = array()) {
+  // NOTE: caching the variables improves performance by 20% when serving cached pages.
+  if ($cached = cache_get('local_variables', 'cache')) {
+    $local_variables = unserialize($cached->data);
+  }
+  else {
+    $result = db_query('SELECT * FROM {local_variable}');
+    while ($local_variable = db_fetch_object($result)) {
+      $local_variables[$local_variable->name] = unserialize($local_variable->value);
+    }
+    cache_set('local_variables', 'cache', serialize($local_variables));
+  }
+
+  foreach ($local_conf as $name => $value) {
+    $local_variables[$name] = $value;
+  }
+
+  return $local_variables;
+}
+
+/**
+ * Return a persistent variable.
+ *
+ * @param $name
+ *   The name of the variable to return.
+ * @param $default
+ *   The default value to use if this variable has never been set.
+ * @return
+ *   The value of the variable.
+ */
+function local_variable_get($name, $default) {
+  global $local_conf;
+
+  return isset($local_conf[$name]) ? $local_conf[$name] : $default;
+}
+
+/**
+ * Set a persistent variable.
+ *
+ * @param $name
+ *   The name of the variable to set.
+ * @param $value
+ *   The value to set. This can be any PHP data type; these functions take care
+ *   of serialization as necessary.
+ */
+function local_variable_set($name, $value) {
+  global $local_conf;
+
+  db_lock_table('local_variable');
+  db_query("DELETE FROM {local_variable} WHERE name = '%s'", $name);
+  db_query("INSERT INTO {local_variable} (name, value) VALUES ('%s', '%s')", $name, serialize($value));
+  db_unlock_tables();
+
+  cache_clear_all('local_variables', 'cache');
+
+  $local_conf[$name] = $value;
+}
+
+/**
+ * Unset a persistent variable.
+ *
+ * @param $name
+ *   The name of the variable to undefine.
+ */
+function local_variable_del($name) {
+  global $local_conf;
+
+  db_query("DELETE FROM {local_variable} WHERE name = '%s'", $name);
+  cache_clear_all('local_variables', 'cache');
+
+  unset($local_conf[$name]);
+}
+
+/**
+ * Execute the system_settings_form.
+ *
+ * If you want node type configure style handling of your checkboxes,
+ * add an array_filter value to your form.
+ *
+ */
+function local_system_settings_form_submit($form_id, $form_values) {
+  $op = isset($form_values['op']) ? $form_values['op'] : '';
+
+  // Exclude unnecessary elements.
+  unset($form_values['submit'], $form_values['reset'], $form_values['form_id'], $form_values['op'], $form_values['form_token']);
+
+  foreach ($form_values as $key => $value) {
+    if ($op == t('Reset to defaults')) {
+      local_variable_del($key);
+    }
+    else {
+      if (is_array($value) && isset($form_values['array_filter'])) {
+        $value = array_keys(array_filter($value));
+      }
+      local_variable_set($key, $value);
+    }
+  }
+  if ($op == t('Reset to defaults')) {
+    drupal_set_message(t('The local configuration options have been reset to their default values.'));
+  }
+  else {
+    drupal_set_message(t('The local configuration options have been saved.'));
+  }
+
+  menu_rebuild();
+}
+
+/**
+ * Add default buttons to a form and set its prefix
+ */
+function local_system_settings_form($form) {
+  $form['buttons']['submit'] = array('#type' => 'submit', '#value' => t('Save configuration') );
+  $form['buttons']['reset'] = array('#type' => 'submit', '#value' => t('Reset to defaults') );
+
+  if (!empty($_POST) && form_get_errors()) {
+    drupal_set_message(t('The local settings have not been saved because of the errors.'), 'error');
+  }
+  $form['#base'] = 'local_system_settings_form';
+  return $form;
+}
